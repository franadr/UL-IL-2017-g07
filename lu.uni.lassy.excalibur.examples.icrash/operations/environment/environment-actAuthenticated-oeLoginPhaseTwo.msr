package icrash.environment.operations.actAuthenticated.outactAuthenticated.oeLoginPhaseTwo {

import icrash.concepts.primarytypes.datatypes
import icrash.concepts.primarytypes.classes
import icrash.concepts.secondarytypes.datatypes

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar

import icrash.environment

	Operation Model {

		operation: icrash.environment.actAuthenticated.outactAuthenticated.oeLoginPhaseTwo(AdtVCode:dtVCode):ptBoolean{
		// include below the specification information (pre,post or ocl or prolog)

			preP {
				
				let TheSystem: ctState in
  				let AvpStarted: ptBoolean in
 				let TheActor:actAuthenticated in
  				
				self.rnActor.rnSystem = TheSystem
  				and self.rnActor = TheActor
  				
  				/*Prep 1*/
  				and TheSystem.vpStarted = true
  				
  				/*Prep 2*/
  				and TheActor.rnctAuthenticated.vpStatus = 'isIn2ndLoginPhase'
  				
  				/*Prep 3*/
  				and TheSystem.rnctAuthenticated.rnctVCode -> exist( vpIsValidated = false)
  				

			}
			
			
			preF{

				
			}
			
			postF{
				let TheActor:actAuthenticated in
  				let AMessage:ptString in
  				
				and self.rnActor = TheActor

				
				/*PostF 1*/
				and if(AdtVCode = TheActor.rnctAuthenticated.VCode) 
				then (AMessage = 'Welcome to iCrash!'
				and TheActor.rnInterfaceIN^ieMessage(AMessage)
				and TheActor.rnctAuthenticated.isPhoneNumberValid = true
				and TheActor.rnctAuthenticated.rnctVCode.vpIsValidated = true)
				else (AMessage = 'The given verification code is wrong!'
				and TheActor.rnInterfaceIN^ieMessage(AMessage))
				endif

  				
  				}
  				
			postP{
				let TheActor:actAuthenticated in
				self.rnActor = TheActor
				
				/*PostP 1*/
  				if(AdtVCode = TheActor.ctAuthenticated.VCode)
  				then (TheActor.ctAuthenticated.vpIsLogged = true
  				and TheActor.ctAuthenticated.vpStatus = 'isNotShown')
				else ()
				endif
			}



		}
	}
}
